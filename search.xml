<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【教程】小白教你如何使用Git</title>
      <link href="/2024/07/10/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E5%B0%8F%E7%99%BD%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git/"/>
      <url>/2024/07/10/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E5%B0%8F%E7%99%BD%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git/</url>
      
        <content type="html"><![CDATA[<h1 id="小白教你如何使用Git"><a href="#小白教你如何使用Git" class="headerlink" title="小白教你如何使用Git"></a>小白教你如何使用Git</h1><p>​作为计算机专业的学生，大家一定听说过Git（没用过也听过吧）。今天作为一个新手，写一个教程教自己如何用好这个「神器」。⚠️ 本教程目的是<strong>教大家如何「用」Git</strong>，至于更基础的部份，譬如：如何下载Git？如何配置Git命令到环境变量中？就搜索其他教程吧，都不会很难的。这里可以推荐一个 <a href="https://www.runoob.com/manual/git-guide/">简明指南</a></p><p>​ps：Window系统除外，配过环境的朋友都知道，Window系统配环境是一等一的垃圾😒</p><h2 id="Git简要介绍"><a href="#Git简要介绍" class="headerlink" title="Git简要介绍"></a>Git简要介绍</h2><p>​Git 是一种分布式版本控制系统，<strong>用于跟踪代码和其他文件的更改</strong>。它由 Linus Torvalds 于 2005 年创建，最初是为管理 Linux 内核开发而设计的。如今，Git 已成为开源和商业项目中最广泛使用的版本控制工具之一。它最为强大的两个特性便是：</p><ul><li>分布式版本控制：每个开发者的工作目录都是一个完整的仓库，包含项目的所有历史记录。<strong>这使得开发者可以在本地进行所有的版本控制操作</strong>，而无需依赖中央服务器。</li><li>完整历史记录：Git 能够精确记录项目的每一次变更，包括谁在何时进行了哪些更改，并支持回滚到任意历史版本。这是由于Git对于每一个提交（commit）、推送（push）都会生成唯一的哈希值标识。</li></ul><p>​💡 作为计算机专业的学生，Git最常用的用途就是：将本地的项目推送到GitHub上。</p><h2 id="如何使用Git"><a href="#如何使用Git" class="headerlink" title="如何使用Git"></a>如何使用Git</h2><p>🌰：用Git将本地项目推送到GitHub上</p><p>（1）初始化一个本地项目</p><p>​（1-1）在本地新建一个文件夹，在这个文件夹里面你可以添加所有项目相关的文件。</p><p>​比如：我在桌面新建一个文件夹，取名为“你好世界”，然后在文件夹中新建一个python文件”Hello.py”，里面写了<code>print(&#39;Hello World&#39;)</code>。</p><p>​在该文件夹路径下进入终端，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>​（1-2）如果你已经有一个本地项目，那就直接在这个本地项目的路径下进入终端，输入<code>git init</code></p><p>​执行上述命令后，Git 会在当前目录中创建一个 <code>.git</code> 目录，该目录包含所有的版本控制信息。此时，你的本地项目就成为了一个本地仓库。</p><p>​（1-3）从GitHub上克隆一个项目到本地，则输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/xxx/xxx.git</span><br></pre></td></tr></table></figure><p>​<code>https://github.com/xxx/xxx.git</code>替换成你需要克隆的项目，此时无需输入<code>git init</code>，因为从GitHub上克隆过来的项目本身自带 <code>.git</code> 目录</p><p>（2）将本地仓库和GitHub仓库连接起来</p><p>​（2-1）该本地项目是我们自己所建</p><p>​在自己的GitHub页面上新建一个仓库，然后在本地仓库的终端上输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/your_username/your_repository.git</span><br></pre></td></tr></table></figure><p>​记得将 <code>your_username</code> 替换为你的 GitHub 用户名，将 <code>your_repository</code> 替换为你在 GitHub 上创建的仓库名称。</p><p>​（2-2）该项目是从GitHub上克隆来的</p><p>​无需任何操作，这个项目本身就和GitHub上的远程仓库连接。</p><p>（3）修改仓库的内容，并同步更新到GitHub上</p><p>​（3-1）首先需要设置一下我们的身份，这里的意思是说，当我们将我们的修改内容推送到GitHub上的时候，我们需要让GitHub知道我们身份，如下图所示：</p><img src="/2024/07/10/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E5%B0%8F%E7%99%BD%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git/image-20240704234320735.png" class="" title="image-20240704234320735"><p>​当我们设置身份以后，GitHub能够将我们识别出来，并列在<code>Contributors</code>上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name  &quot;username&quot;  </span><br><span class="line">git config --global user.email  &quot;email&quot;</span><br></pre></td></tr></table></figure><p>​其中“username”和“email”换成自己的GitHub账户的用户名和邮箱。<code>--global</code>二级命令表示“对当前用户都生效”，除此以外，还有<code>--system</code>和<code>--local</code>两个二级命令，这里不再赘述，可以询问ChatGPT等大语言模型，了解它们的区别</p><p>​（3-2）添加文件到暂存区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .  // 添加所有文件</span><br><span class="line">git add hello.py // 添加“hello.py”文件</span><br></pre></td></tr></table></figure><p>​（3-3）提交改动到本地仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;代码提交信息&quot;</span><br></pre></td></tr></table></figure><p>​其中的“代码提交信息”是你为这一次提交而写的“附加信息”，一般来说都是用来告诉别人你这次改动改了什么</p><p>​具体来说，这个“代码提交信息”被推送到GitHub上以后，就会显示出来，如下图所示</p><img src="/2024/07/10/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E5%B0%8F%E7%99%BD%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git/image-20240705000459243.png" class="" title="image-20240705000459243"><p>​（3-4）推送改动到远程仓库</p><p>​如果该本地项目是我们自己所建（不是来自GitHub），且之前从来没有推送，则先输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>​其中<code>origin</code>：远程仓库的名称。<code>origin</code> 是默认的远程仓库名称，指向你克隆或添加的 GitHub 仓库，无需修改。<code>main</code>：你想推送到的远程分支名称。此处是 <code>main</code> 分支，表示你将本地的 <code>main</code> 分支推送到远程的 <code>main</code> 分支。</p><blockquote><p>[!NOTE]</p><p>⚠️ 上述命令可能无法实现我们的预期。这是因为GitHub创建新仓库的时候，默认分支是<code>main</code>，而我们在本地项目下初始化的命令<code>git init</code>的默认分支是<code>master</code>，两者可能出现不匹配的情况。</p><p>​有两种解决方式：</p><p>​1、在新建的仓库下修改默认分支为<code>master</code>，如下图所示：</p><img src="/2024/07/10/%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91%E5%B0%8F%E7%99%BD%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git/image-20240710210019786.png" class="" title="image-20240710210019786"><p>​2、在本地设置修改自己默认分支的名称为<code>main</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m main</span><br></pre></td></tr></table></figure></blockquote><p>​后面推送都可以使用以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>​如果该本地项目是来自GitHub的，则直接使用<code>git push</code>推送</p><p>​（3-5）更新自己的仓库</p><p>​一般来说，一个项目可能有多个contributor共同维护。如果别人更新了项目，我们也需要保持自己的本地仓库和最新版本同步。此时输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="Git其他命令"><a href="#Git其他命令" class="headerlink" title="Git其他命令"></a>Git其他命令</h2><p><strong>git status</strong>：显示当前工作目录的状态，包括已修改、已暂存和未跟踪的文件。</p><p><strong>git log</strong>：查看提交历史记录。</p><p><strong>git branch</strong>：列出所有本地分支。</p><p>**git branch <branch-name>**：创建新分支。</p><p>**git checkout <branch-name>**：切换到指定分支。</p><p>**git merge <branch-name>**：合并指定分支到当前分支。</p><p>**git branch -d <branch-name>**：删除本地分支。</p><p><strong>git reset</strong>：撤销暂存区的更改。</p><p><strong>git revert</strong>：撤销提交，并生成一个新的提交。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="https://www.runoob.com/manual/git-guide/">git - 简明指南</a></p><p>[2] <a href="https://blog.csdn.net/lovedingd/article/details/121288974">Git config 查看和设置配置信息</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Golang】Module:database/sql</title>
      <link href="/2024/05/08/%E3%80%90Golang%E3%80%91Module-database-sql/"/>
      <url>/2024/05/08/%E3%80%90Golang%E3%80%91Module-database-sql/</url>
      
        <content type="html"><![CDATA[<h1 id="Module-database-sql"><a href="#Module-database-sql" class="headerlink" title="Module:database&#x2F;sql"></a>Module:database&#x2F;sql</h1><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>​<code>database/sql</code> 是 Go 语言的标准库之一，它提供了一种通用的接口来与 SQL 数据库进行交互。</p><h2 id="数据库：从连接到关闭"><a href="#数据库：从连接到关闭" class="headerlink" title="数据库：从连接到关闭"></a>数据库：从连接到关闭</h2><h3 id="1、打开数据库"><a href="#1、打开数据库" class="headerlink" title="1、打开数据库"></a>1、打开数据库</h3><p>​<code>database/sql</code> 中有一个基本的连接池（basic connection pool）。默认情况下，连接数量没有限制。如果你尝试同时做很多事情，你可以创建任意数量的连接。这可能会导致数据库返回错误，例如“连接太多”。</p><p>​<code>sql.DB</code>代表一个数据库连接池实例（而非单个数据库连接）</p><p>​（1）要创建 <code>sql.DB</code> ，请使用 <code>sql.Open()</code> 。这将返回一个 <code>*sql.DB</code> ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">db, err := sql.Open(<span class="string">&quot;mysql&quot;</span>,</span><br><span class="line"><span class="string">&quot;user:password@tcp(127.0.0.1:3306)/hello&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// 在函数返回后释放db资源，保证 sql.DB 的生存期不超过main函数的作用域</span></span><br><span class="line"><span class="keyword">defer</span> db.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​其中：</p><p>​<code>sql.Open</code> 的第一个参数是驱动程序名称，”mysql”指的是MySQL数据库</p><p>​第二个参数是特定于驱动程序的语法，它告诉驱动程序如何访问底层的XML（XML 不是一种编程语言，而是一种数据描述语言，<strong>也就是以特定的格式表示数据</strong>）。</p><p>​在上述代码中，<code>&quot;user:password@tcp(127.0.0.1:3306)/hello&quot;</code>指的是<code>&quot;[用户名]:[密码]@tcp[数据库地址：端口]/[数据库名称]&quot;</code></p><p>​（2）⚠️<code>sql.Open()</code> 不会建立到数据库的任何连接，也不会验证驱动程序连接参数是否正确。相反，它只是抽象数据库（database abstraction）供以后使用。如果你想立即检查数据库是否可用和可访问，请使用 <code>db.Ping()</code> 来执行此操作，并记住检查错误：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">err = db.Ping()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、获取数据库中的数据"><a href="#2、获取数据库中的数据" class="headerlink" title="2、获取数据库中的数据"></a>2、获取数据库中的数据</h3><p>​举个例子🌰：我想在 <code>users</code> 表中查询 <code>id</code> 为1的用户，并打印出用户的 <code>id</code> 和 <code>name</code> 。 </p><p>以下是代码实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了两个变量，id 和 name，用于存储从数据库查询结果中获取的数据。</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">id <span class="type">int</span></span><br><span class="line">name <span class="type">string</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 将查询发送到数据库</span></span><br><span class="line"><span class="comment">// 查询结果存储在 rows 中，如果查询过程中出现错误，错误信息会被存储在 err 中。</span></span><br><span class="line">rows, err := db.Query(<span class="string">&quot;select id, name from users where id = ?&quot;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在函数返回时关闭 rows，释放相关资源。</span></span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="comment">// 遍历查询结果。</span></span><br><span class="line"><span class="comment">// rows.Next() 会将 rows 的内部指针移动到下一行，如果还有更多的行，它会返回 true，否则返回 false。</span></span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">  <span class="comment">// 将当前行的数据读取到 id 和 name 变量中。</span></span><br><span class="line">err := rows.Scan(&amp;id, &amp;name)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// 将 id 和 name 的值打印到日志中</span></span><br><span class="line">log.Println(id, name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查在遍历查询结果过程中是否出现错误。</span></span><br><span class="line">err = rows.Err()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>[!NOTE]</p><p>​（1）如果使用 <code>rows.Next()</code> 遍历所有行，当所有的行都被读取完毕后，再次调用 <code>rows.Next()</code> 会返回 <code>false</code>，并且内部会遇到一个 <strong>EOF（End Of File）</strong>错误，表示没有更多的数据可以读取了。同时程序会自动调用<code>rows.Close()</code>来释放资源。</p><p>​但是如果由于某种原因你退出了这个循环，那么 <code>rows</code> 不会关闭，连接仍然是打开的，此时需要我们自行关闭。(如果 <code>rows.Next()</code> 由于错误而返回false，则会自动关闭）</p><p>​<strong>因此每次我们对数据库进行操作的时候，最好保持了一个良好的习惯：每次操作后，显式调用<code>rows.Close()</code></strong></p><p>​（2）不要在循环中使用 <code>defer</code> 。该语句在函数退出后才会被执行，所以长时间运行的函数不应该使用它。<strong>这样做的后果就是内存消耗不断积累，导致内存占用异常高</strong>。</p></blockquote><p>​❗️上面的代码也有一个问题，每次查询都需要重新写一个查询语句，太麻烦了😭。所以有没有一个方法可以重用我们之前已经写过的查询语句？下面的代码提供了一个思路：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预处理一个 SQL 查询语句，预处理是指将 SQL 语句模板和参数分开</span></span><br><span class="line">stmt, err := db.Prepare(<span class="string">&quot;select id, name from users where id = ?&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> stmt.Close()</span><br><span class="line"><span class="comment">// 执行预处理的 SQL 查询语句，并将参数 1 传入其中</span></span><br><span class="line">rows, err := stmt.Query(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err = rows.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、修改数据库中的数据"><a href="#3、修改数据库中的数据" class="headerlink" title="3、修改数据库中的数据"></a>3、修改数据库中的数据</h3><p>修改数据的操作包括；插入数据、更新数据、删除数据等等</p><p>​举个例子🌰：我想往数据库中插入一条数据：用户名为“Dolly”的数据</p><p>以下是代码实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预处理一个 SQL 插入语句</span></span><br><span class="line">stmt, err := db.Prepare(<span class="string">&quot;INSERT INTO users(name) VALUES(?)&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> stmt.Close()</span><br><span class="line"><span class="comment">// 执行插入语句</span></span><br><span class="line"><span class="comment">// 执行该语句会产生一个 sql.Result ，它提供对语句元数据的访问：最后插入的ID和受影响的行数。</span></span><br><span class="line">res, err := stmt.Exec(<span class="string">&quot;Dolly&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最后插入的ID</span></span><br><span class="line">lastId, err := res.LastInsertId()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 受影响的行数</span></span><br><span class="line">rowCnt, err := res.RowsAffected()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;ID = %d, affected = %d\n&quot;</span>, lastId, rowCnt)</span><br></pre></td></tr></table></figure><h3 id="4、批量操作数据库（包括查询、修改）"><a href="#4、批量操作数据库（包括查询、修改）" class="headerlink" title="4、批量操作数据库（包括查询、修改）"></a>4、批量操作数据库（包括查询、修改）</h3><p>上述的方法都是对数据库进行一次查询操作或者修改操作，现实生产活动中，往往涉及对数据库的大批量的操作，而不只是两三次操作。<strong>此时我们需要将这些操作整合为一次事务（transaction），也就是把对数据库的操作打包。</strong>这些操作作为一个执行单元，要么全部成功，要么全部失败。</p><p>​举个例子🌰：我想做两次插入操作，插入两条数据：用户名为“Alice”和“Bob”的数据</p><p>以下是代码实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始一个新的transaction</span></span><br><span class="line">tx, err := db.Begin()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line">_, err = tx.Exec(<span class="string">&quot;INSERT INTO users (name) VALUES (?)&quot;</span>, <span class="string">&quot;Alice&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    tx.Rollback() <span class="comment">// 如果插入操作失败，回滚事务</span></span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line">_, err = tx.Exec(<span class="string">&quot;INSERT INTO users (name) VALUES (?)&quot;</span>, <span class="string">&quot;Bob&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    tx.Rollback() <span class="comment">// 如果插入操作失败，回滚事务</span></span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = tx.Commit() <span class="comment">// 如果所有操作都成功，提交事务</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>[!NOTE]</p><p>​在transaction中使用<code>db.Prepare</code>需要谨慎</p></blockquote><h3 id="5、其他情况"><a href="#5、其他情况" class="headerlink" title="5、其他情况"></a>5、其他情况</h3><p>​（1）数据库中某条数据的某个值为空，比如<code>username:Alice, telephone:null</code>，遇到这种情况可以使用下述代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// COALESCE 是一个 SQL 函数，如果 other_field 是 NULL，那么就会返回空字符串 &#x27;&#x27;，以避免在go语言的代码中处理空值</span></span><br><span class="line">rows, err := db.Query(<span class="string">`</span></span><br><span class="line"><span class="string">SELECT</span></span><br><span class="line"><span class="string">name,</span></span><br><span class="line"><span class="string">COALESCE(other_field, &#x27;&#x27;) as otherField</span></span><br><span class="line"><span class="string">WHERE id = ?</span></span><br><span class="line"><span class="string">`</span>, <span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">err := rows.Scan(&amp;name, &amp;otherField)</span><br><span class="line"><span class="comment">// ..</span></span><br><span class="line"><span class="comment">// If `other_field` was NULL, `otherField` is now an empty string. This works with other data types as well.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="http://go-database-sql.org/">Go database&#x2F;sql tutorial</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【社会】压缩现代性</title>
      <link href="/2024/04/16/%E3%80%90%E7%A4%BE%E4%BC%9A%E3%80%91%E5%8E%8B%E7%BC%A9%E7%8E%B0%E4%BB%A3%E6%80%A7/"/>
      <url>/2024/04/16/%E3%80%90%E7%A4%BE%E4%BC%9A%E3%80%91%E5%8E%8B%E7%BC%A9%E7%8E%B0%E4%BB%A3%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="压缩现代性"><a href="#压缩现代性" class="headerlink" title="压缩现代性"></a>压缩现代性</h1><p>“压缩现代性”，这个词很生动、贴切。</p><h2 id="什么叫做“压缩现代性”"><a href="#什么叫做“压缩现代性”" class="headerlink" title="什么叫做“压缩现代性”"></a>什么叫做“压缩现代性”</h2><p>中（含台湾）、日、韩三个国家的普通民众的生活都有明显的“压缩”特征：</p><p>​1、<strong>住房是压缩的</strong>。美国人住别墅，中日韩绝大多数人住公寓。东亚城市人口密度远高于美国，也高于欧洲。这节约了土地，也导致普通人的个人空间严重不足；</p><p>​2、<strong>学习是压缩的</strong>。“做题家”，这一个词描述了以高考为人才选拔的高压模式。进大学前，想考个好大学、好专业，那就只有拼命做题；</p><p>​3、<strong>工作是压缩的</strong>。“加班、超时劳动”被普遍接受，只要老板给高一点的加班费，打工者对加班一般持欢迎与接受的态度。但这也极大地减少了可用于关心家庭、个人再学习、社交等一系列的工作之外的时间；</p><p>​4、<strong>生育也是压缩的</strong>。一对夫妻，生一个孩子，觉得对父母有个交待，就可以了。想生两胎，房子太小，转不开身；上班太忙，没时间顾孩子；孩子学费贵，怕生多了孩子，付不起学费，亏待了孩子。</p><p>​这种压缩现代性，<strong>好处是极大地节约了社会生产的成本，所以东亚三国的工业制成品可以在全球都有成本竞争力。</strong></p><h2 id="那么代价是什么呢？"><a href="#那么代价是什么呢？" class="headerlink" title="那么代价是什么呢？"></a>那么代价是什么呢？</h2><p>​1、<strong>社会自身的消费严重不足</strong>。普通人不去社交、不去享受生活，那花出去的钱就少了，但整个社会的市场规模也因此受限；</p><p>​2、<strong>人的再生产不足</strong>，也就是生出来的人太少了。于是老龄化、少子化的现象会早早出现；</p><p>​3、<strong>人群的创造力不足</strong>，放松的、休闲的、社交的活动少了，整个群体的创造力也随之减少。</p><h2 id="那么如何改善“压缩现代性”呢？"><a href="#那么如何改善“压缩现代性”呢？" class="headerlink" title="那么如何改善“压缩现代性”呢？"></a>那么如何改善“压缩现代性”呢？</h2><p>​我也不知道😂，“卷起来”文化是根植于东亚文化圈的，整个社会对个体的要求是“干正事”。所谓“干正事”，不过就是“做学生的时候要认真学习，专心刷题；做社畜的时候要认真工作，比比谁下班更晚”。如果你“不干正事”，那么就会感受到来自社会的压力，迫使你“干正事”。</p><p>​但其实我们都知道，”刷题“和”下班晚“有时候是在重复无用功。”卷“没有意义，但可惜整个社会都对此保持了一种微妙的默契，这种文化基因需要几代人的不断改变。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 社会 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON文件是什么</title>
      <link href="/2024/03/15/JSON%E6%96%87%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2024/03/15/JSON%E6%96%87%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h1 id="JSON文件"><a href="#JSON文件" class="headerlink" title="JSON文件"></a>JSON文件</h1><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>​        虽然我是计算机类专业的学生，但其实编程相关的知识非常匮乏😂。学校里教的是课本上的专业知识，而现实工作中我们遇到的问题往往不能仅靠课本知识来解决，需要我们自己去学习相关知识。倒不是说课本知识不重要，相反，我觉得这些知识很重要，<strong>但它们只是「计算机专业」的基础</strong>。只有立足于基础知识，才能深入，学会解决实际问题。</p><p>​        跑偏了😄，最近做实验需要处理数据，要处理的数据是以<code>.json</code>为后缀的文件。虽然以前碰到过这种文件，但是从来没有想过要去深入了解一下，趁着这次机会，好好学一下。</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>​        JSON的全称为：JavaScript Object Notation，是一种轻量级的数据交互格式。</p><p>​        简单来说：JSON 就是一种在各个编程语言中流通的数据格式，可以使用任何编程语言来处理 JSON 文件中所包含的数据。</p><p>​        大白话就是：<strong>JSON 相当于英语，编程中的国际通用语言</strong>，任何编程语言都能“看懂” JSON文件，并将其中的数据“翻译”出来。</p><p>​        📖 By the way：JSON虽然全称中包含JavaScript，但其实跟JS没有什么关系😂。<strong>JSON是基于ECMAScript语法</strong>，JSON在JS中的处理也并没有比其他语言占有更多优势。只是因为语法相似，而使得<strong>JS开发者能更快的上手JSON</strong>而已。</p><h2 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h2><p>​        既然 JSON 格式的文件是“数据的通用语言”，那么它遵循怎样的语法呢？我一开始以为会很复杂，像是我们的中文语法就非常的复杂。但其实「大道至简」，<strong>它的语法非常简单！</strong></p><h3 id="分支：数据是如何表示的？"><a href="#分支：数据是如何表示的？" class="headerlink" title="分支：数据是如何表示的？"></a>分支：数据是如何表示的？</h3><p>​        为了更深入地理解 JSON 格式的语法，首先我们要了解作为“数据的通用语言”，它需要如何表示数据。</p><p>​        事实上，所有的数据都可以分为以下三种类型：</p><p>​1、标量Scalar。就是一个单独的字符串string或数字numbers，比如“成都”这个单独的词。</p><p>​        2、序列Sequence。也就是若干个相关的数据按照一定顺序<strong>并列</strong>在一起，又叫做数组array，或者列表list，比如“成都，重庆”。</p><p>​        3、映射Mapping，也就是一个键值对，即数据有一个名称，还有一个与之相对应的值，这又称作散列hash或字典dictionary，比如“蓉城：成都”。</p><p>​        是不是很熟悉，这是每个编程语言都会内置的数据类型😄</p><h3 id="JSON-具体语法"><a href="#JSON-具体语法" class="headerlink" title="JSON 具体语法"></a>JSON 具体语法</h3><p>​        那么为了表示数据，JSON 格式作出了如下规定：</p><p>​        1、并列的数据之间用逗号(,)分隔</p><p>​        2、映射用冒号(:)表示</p><p>​        3、并列数据的集合(数组)用方括号([])表示</p><p>​        4、映射的集合(对象)用大括号({})表示</p><p>​        5、映射的<strong>键</strong>部分，必须用双引号<code>&quot;&quot;</code>包裹，单引号<code>&#39;&#39;</code>都不行；json的键值对的<strong>值</strong>部分，不允许出现函数<code>function</code>，<code>undefined</code>，<code>NaN</code>，但是可以有<code>null</code></p><h2 id="举个例子🌰"><a href="#举个例子🌰" class="headerlink" title="举个例子🌰"></a>举个例子🌰</h2><p>​        现在我给一个具体的 JSON 文件，以<strong>Python语言</strong>为例，看看如何处理 JSON文件。假设这个 JSON 文件的储存路径是<strong>path</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Solidity&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sources&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;contracts/TIPS.sol&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;contracts/ERC1155Creator.sol&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@openzeppelin/contracts/proxy/Proxy.sol&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;optimizer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;runs&quot;</span><span class="punctuation">:</span> <span class="number">300</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outputSelection&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;*&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;evm.bytecode&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;evm.deployedBytecode&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;devdoc&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;userdoc&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;metadata&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;abi&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;libraries&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>​        现在提取 JSON 文件中的<code>&quot;language&quot;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">datas = json.load(<span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>))</span><br><span class="line">res = datas[<span class="string">&#x27;language&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># 输出“Solidity”</span></span><br></pre></td></tr></table></figure><p>​        现在我要提取<code>&quot;contracts/ERC1155Creator.sol&quot;</code>的<code>content</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">datas = json.load(<span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>))</span><br><span class="line">sources = datas[<span class="string">&#x27;sources&#x27;</span>]</span><br><span class="line">values = sources.values()</span><br><span class="line">content = values[<span class="number">1</span>][<span class="string">&#x27;contracts/ERC1155Creator.sol&#x27;</span>][<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"><span class="comment"># 输出2</span></span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="https://blog.csdn.net/qq_44139411/article/details/121120367">json文件是什么？</a></p><p>[2] <a href="https://zhuanlan.zhihu.com/p/138511000">什么是json</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>什么是「雪球」</title>
      <link href="/2024/02/20/%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E9%9B%AA%E7%90%83%E3%80%8D/"/>
      <url>/2024/02/20/%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E9%9B%AA%E7%90%83%E3%80%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是「雪球」？"><a href="#什么是「雪球」？" class="headerlink" title="什么是「雪球」？"></a>什么是「雪球」？</h1><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>​2024年1月可以说是A股股民刻骨铭心的一段日子了，在短短的一个月内，沪指下跌6.27%；深指下跌13.77%；创业板指下跌16.81%，可以说是“跌跌不休”。这还只是指数的下跌幅度，就个股而言只会下跌幅度更大，大家都是结结实实亏了好大一笔钱😭。</p><p>​为了了解这一整个月的暴跌背后的原因（一个学生党，我亏了不少钱💰，给自己买个教训了😂），我在网上看了很多博主的分析：除了经济大环境不景气的原因之外，一个绕不过去的话题就是：雪球爆仓。因此我开始了解「雪球」到底是什么？</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>​从专业知识的角度来说，「雪球」是一种金融结构化产品。</p><blockquote><p>​所谓结构化产品，就是一种将客户收益挂钩某种标的（如指数、商品等）的价格，将募集资金用于购买基础资产和挂钩标的衍生品的一种新型金融产品。</p><p>​一般包含三个基本要素：<strong>基础资产、挂钩标的资产及其衍生品合约。</strong></p></blockquote><img src="/2024/02/20/%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E9%9B%AA%E7%90%83%E3%80%8D/image-20240220121107160.png" class="" title="image-20240220121107160"><p>​而「雪球」就是其中相对简单的一种。下面用一个例子来说明「雪球」的具体结构是什么样子。</p><h3 id="一个例子🌰"><a href="#一个例子🌰" class="headerlink" title="一个例子🌰"></a>一个例子🌰</h3><table><thead><tr><th>产品简介</th><th></th><th>分析</th></tr></thead><tbody><tr><td>标的名称</td><td>中国平安</td><td>盈亏参考的对象，这里既可以是个股，也可以是指数</td></tr><tr><td>最长存续期</td><td>6个月</td><td>产品的生命周期，满足一定条件可以提前结束</td></tr><tr><td>敲出观察日</td><td>每个月月末</td><td>赚钱走人的机会只有6次</td></tr><tr><td>敲出价格</td><td>100% * 期初价格</td><td></td></tr><tr><td>敲入观察日</td><td>存续期的所有交易日</td><td>每天都可能亏钱，跟敲出的苛刻条件形成鲜明对比</td></tr><tr><td>敲入价格</td><td>80% * 期初价格</td><td></td></tr><tr><td>票息率</td><td>年化12%</td><td>每个月收益1%</td></tr><tr><td>保证金</td><td>100% * 名义金额</td><td>全额保证金，也就是投多少钱就买多少钱的产品。但是这里是可以加杠杆的</td></tr></tbody></table><p>​1、敲出：敲出简单理解就是“赚钱走人”，如果在敲出观察日那一天，标的价格高于敲出价格，那么就可以赚钱离场。</p><img src="/2024/02/20/%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E9%9B%AA%E7%90%83%E3%80%8D/image-20240220124100891.png" class="" title="image-20240220124100891"><p>​2、敲入：敲入就是“留下亏钱”，如果在敲入观察日的任何一天，标的价格跌破敲入价格，那么会记录这一次敲入，在存续期结束以后清算，<strong>可能会亏钱</strong>。具体来说，不管敲入多少次，如果在存续期内只要有一次敲出，那就可以获利离场；但是如果一次敲出都没有，那就按照标的的价格计算亏损。</p><img src="/2024/02/20/%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E9%9B%AA%E7%90%83%E3%80%8D/image-20240220124703314.png" class="" title="image-20240220124703314"><p>​3、在存续期既没有敲出，也没有敲入：那么依然获利。收益 &#x3D; 存续期 * 票息率。</p><img src="/2024/02/20/%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E9%9B%AA%E7%90%83%E3%80%8D/image-20240220124342819.png" class="" title="image-20240220124342819"><p>​🌟总结一下：「雪球」产品的收益仅与产品的票息率和存续期有关，和标的物的价格无关；但是一旦发生亏损，亏损就会和标的物价格挂钩。本质上，<strong>买「雪球」产品相当于卖保险</strong>，这份保险就是券商银行去市场投资的保险，我们客户买「雪球」，就是给券商公司兜底。</p><p>​<em>如果券商公司投资赚钱了（标的物价格涨破敲出价格），那么我们可以获得保费（雪球的固定收益）；如果亏钱了（标的物价格跌破敲入价格），那么我们就要承担投资的损失（按照标的物价格计算亏损）。</em></p><h3 id="现状分析"><a href="#现状分析" class="headerlink" title="现状分析"></a>现状分析</h3><p>​说完了「雪球」到底是一个什么东西，那么为什么雪球集中爆仓会促使股市继续向下跌呢？我们继续思考🤔</p><p>​当市场欣欣向荣，券商公司有利可图的时候，形成一个正循环</p><img src="/2024/02/20/%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E9%9B%AA%E7%90%83%E3%80%8D/image-20240220170133812.png" class="" title="image-20240220170133812"><p>可是一旦市场开始下跌，这个正向循环的链条就会被打破。雪球产品大规模敲入，导致许多客户亏损。券商公司失去了雪球产品作为保险，处于风控要求，就会出售手上的标的物资产，导致市场上标的物供给增加，价格下跌，促使市场继续向下。</p><h2 id="多说一句"><a href="#多说一句" class="headerlink" title="多说一句"></a>多说一句</h2><p>​「雪球」产品的客户都是高净值人群，因此这个产品和我们这些普通人无缘啦🤷。根据历史经验，「雪球」产品有近70%的胜率，这是一个非常高的胜率。所以说，买「雪球」产品，<strong>大概率赚小钱，小概率亏大钱</strong>😄。</p><p>​我本身不是商科专业出身的，学习这些金融知识是为了拓宽我的知识面，害怕自己学完就忘光了，所以写下这篇博客，算是做个笔记📒啦。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="https://www.bilibili.com/video/BV1Yy421a778/?buvid=XX5858D549B1E59EA8D8D742D09571E92B3B5&from_spmid=tm.recommend.0.0&is_story_h5=false&mid=g3h6/JbCm9FRA4qw6TtjNg==&p=1&plat_id=114&share_from=ugc&share_medium=android&share_plat=android&share_session_id=cb795d87-c817-44ba-b8fc-aa6f270b3a9e&share_source=GENERIC&share_tag=s_i&spmid=united.player-video-detail.0.0&timestamp=1707024846&unique_k=ZwW6ueZ&up_id=111470911">【雪球】敲入危机：雪球产品的设计与链条</a></p><p>[2] <a href="https://www.zhihu.com/tardis/zm/art/396583007?source_id=1005">结构化金融产品有哪些？（上）</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 金融 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一步解决VSCode的Remote-ssh插件连接失败问题</title>
      <link href="/2024/02/20/%E4%B8%80%E6%AD%A5%E8%A7%A3%E5%86%B3VSCode%E7%9A%84Remote-ssh%E6%8F%92%E4%BB%B6%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"/>
      <url>/2024/02/20/%E4%B8%80%E6%AD%A5%E8%A7%A3%E5%86%B3VSCode%E7%9A%84Remote-ssh%E6%8F%92%E4%BB%B6%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="【VSCode】Remote-ssh插件连接失败问题"><a href="#【VSCode】Remote-ssh插件连接失败问题" class="headerlink" title="【VSCode】Remote-ssh插件连接失败问题"></a>【VSCode】Remote-ssh插件连接失败问题</h1><h2 id="问题背景介绍"><a href="#问题背景介绍" class="headerlink" title="问题背景介绍"></a>问题背景介绍</h2><p>​Remote-ssh插件是每一个使用VSCode的朋友都会安装的必备插件，借助这个插件，我们能方便快捷的连接远程服务器。但是有时候会碰到连接失败的问题（没错，又要折腾了，计算机翻脸比翻书还快😂），此时提示错误<code>Error: XHR failed</code>。</p><p>​Remote-ssh插件的功能比一般的ssh远程连接功能更为强大，这是因为当我们客户端的 VSCode 连接到远程服务器后，它会自动在服务器上下载对应版本的 <code>vscode-server</code>，这个 <code>server</code> 会代劳一些基本的操作。而这个 <code>server</code> 默认会下载在 <code>~/.vscode-server/bin/&#123;commit-id&#125;/</code> 文件夹下。</p><p>​若服务器端不能运行我们客户端对应版本的<code>vscode-server</code>，则会自动下载。而当服务器网络不佳时，下载往往会超时，导致连接失败。这就是报错的原因。而事实上，即使服务器网络正常，遇到缺少<code>vscode-server</code>的情况时也有一定概率无法下载<code>vscode-server</code>，具体原因不详，可能跟VSCode自身有关。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>​以下操作以 <strong>Mac系统</strong> 作为示例，<strong>Window系统</strong> 使用相同的办法，仅是在具体操作上有所不同</p><p>​1、获取自己VSCode的Commit-id。进入终端，输入指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code --verson</span><br></pre></td></tr></table></figure><p>​输出结果如下所示：</p><img src="/2024/02/20/%E4%B8%80%E6%AD%A5%E8%A7%A3%E5%86%B3VSCode%E7%9A%84Remote-ssh%E6%8F%92%E4%BB%B6%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/image-20240219234314735.png" class="" title="image-20240219234314735"><p>​第一行代表 VSCode 的版本号，第二行代表 VScode 的 Commit-id，第三行代表本地指令集。<strong>将第二行的一串字符记下来</strong>。</p><p>​2、手动下载 <code>vscode-server</code> 包。在浏览器上输入：<a href="https://update.code.visualstudio.com/commit:commit-id/server-linux-x64/stable%EF%BC%8C%E7%94%A8%E4%B8%8A%E4%B8%80%E6%AD%A5%E8%8E%B7%E5%8F%96%E7%9A%84Commit-id%E6%9B%BF%E6%8D%A2%E9%93%BE%E6%8E%A5%E4%B8%AD%E7%9A%84[commit-id]%EF%BC%8C%E5%8D%B3%E5%8F%AF%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%89%88%E6%9C%AC%E7%9A%84%60vscode-server%60">https://update.code.visualstudio.com/commit:commit-id/server-linux-x64/stable，用上一步获取的Commit-id替换链接中的[commit-id]，即可下载对应版本的`vscode-server`</a> 稳定版。下载完成后我们会得到一个 <code>vscode-server-linux-x64.tar.gz</code> 。</p><p>​3、通过其他ssh远程连接的方式进入服务器的Terminal。打开终端，输入<code>ssh -p 端口号 服务器用户名@ip</code> （例如ssh -p 22 <a href="mailto:&#97;&#100;&#x6d;&#105;&#110;&#64;&#49;&#49;&#x39;&#46;&#x32;&#48;&#46;&#51;&#x35;&#x2e;&#x36;&#x31;">&#97;&#100;&#x6d;&#105;&#110;&#64;&#49;&#49;&#x39;&#46;&#x32;&#48;&#46;&#51;&#x35;&#x2e;&#x36;&#x31;</a>）</p><img src="/2024/02/20/%E4%B8%80%E6%AD%A5%E8%A7%A3%E5%86%B3VSCode%E7%9A%84Remote-ssh%E6%8F%92%E4%BB%B6%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/image-20240219233831011.png" class="" title="image-20240219233831011"><p>如上图所示，我已经成功进入服务器的终端了。</p><p>​然后进入 <code>~/.vscode-server/bin/&#123;commit-id&#125;/</code> 目录下，输入指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.vscode-server/bin</span><br><span class="line">cd ./abd2f3db4bdb28f9e95536dfa84d8479f1eb312d</span><br></pre></td></tr></table></figure><p>第一条指令都是一样的，第二条指令使用的一连串字符是第一步中获取的Commit-id。最后结果如下所示：</p><img src="/2024/02/20/%E4%B8%80%E6%AD%A5%E8%A7%A3%E5%86%B3VSCode%E7%9A%84Remote-ssh%E6%8F%92%E4%BB%B6%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/image-20240219235938352.png" class="" title="image-20240219235938352"><p>​4、将 <code>vscode-server-linux-x64.tar.gz</code> 上传到服务器 <code>~/.vscode-server/bin/&#123;commit-id&#125;/</code> 目录下并解压。这里使用scp指令传输文件，从 <code>viscose-server</code> 压缩包所在的文件夹位置进入终端，输入指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp vscode-server-linux-x64.tar.gz testuser@47.100.247.240</span><br></pre></td></tr></table></figure><p>上述的 <code>testuser@47.100.247.240</code> 记得要换成自己的服务器地址。</p><p>​然后输入指令解压：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvzf vscode-server-linux-x64.tar.gz --strip-components 1</span><br></pre></td></tr></table></figure><p>​最后输入 <code>ls</code> 指令查看解压后的文件，只要包括如下文件 <code>bin  extensions  LICENSE  node  node_modules  out  package.json  product.json</code> 就大功告成了！</p><img src="/2024/02/20/%E4%B8%80%E6%AD%A5%E8%A7%A3%E5%86%B3VSCode%E7%9A%84Remote-ssh%E6%8F%92%E4%BB%B6%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/image-20240220001045168.png" class="" title="image-20240220001045168"><p>​5、重启VSCode，重新连接。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="https://zhuanlan.zhihu.com/p/671718415">我只教一次！vscode remote-ssh 连接失败的基本原理和优雅的解决方案</a></p><p>[2] <a href="https://blog.csdn.net/qq_45654306/article/details/132047411">【VScode】Remote-SSH XHR failed无法访问远程服务器</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网红与资本</title>
      <link href="/2024/01/20/%E7%BD%91%E7%BA%A2%E4%B8%8E%E8%B5%84%E6%9C%AC/"/>
      <url>/2024/01/20/%E7%BD%91%E7%BA%A2%E4%B8%8E%E8%B5%84%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="网红与资本"><a href="#网红与资本" class="headerlink" title="网红与资本"></a>网红与资本</h1><p>⚠️ 本篇文章是本人根据原视频内容进行总结的，其中包含原视频内容的要点和一点点个人的主观想法，仅供大家一起学习。原视频长达四个多小时，里面有很多值得学习的观点，可以帮助我们拓展认知（以后去复习的时候视频太长了不想看，就直接看文字笔记吧😂）</p><p>❗ 主要观点来自「B站up主」巫师财经</p><p>🔗 视频链接：<a href="https://www.bilibili.com/video/BV1Ja411N7zD/?spm_id_from=333.999.0.0&vd_source=dc147d1200726845504a03a7da97c364">【巫师】网红与资本简史</a></p><p>♟️ 引子：现在（2024.01.20）网红经济可谓是爆火，前有电商直播带货一姐一哥，后有类似新东方甄选这样的后起之秀。他们之中的不少人还活跃在各大视频平台，通过吸取流量来实现变现，甚至是依托流量完成从「打工人」到「资本家」的华丽转变。那么，流量如何变现甚至是资本化？</p><h2 id="一、婚姻：傍上富豪，从此完成阶级跃迁。"><a href="#一、婚姻：傍上富豪，从此完成阶级跃迁。" class="headerlink" title="一、婚姻：傍上富豪，从此完成阶级跃迁。"></a>一、婚姻：傍上富豪，从此完成阶级跃迁。</h2><h3 id="奶茶与刘强东："><a href="#奶茶与刘强东：" class="headerlink" title="奶茶与刘强东："></a>奶茶与刘强东：</h3><p>​奶茶妹妹凭借一张拿着奶茶的照片一夜爆火，而这种爆火的方式具有极强的偶然性，正如&#x3D;&#x3D;“你不知道明天和意外哪个先来”&#x3D;&#x3D;。抛开阴谋论，奶茶的网红之路确确实实是一个巧合，不具备复现的可能。而奶茶与刘强东的相识就更是一个巧合了。</p><p>​奶茶与刘强东的婚姻并不是单纯的嫁入豪门，而是利用奶茶的网红身份和社会热度为京东造势。不论是奶茶和刘强东的高调官宣结婚，还是后面高调官宣生子，都是为了抓住大众眼球，提高京东的话题度，这种营销手段在一定程度上提高了京东的曝光度。同时，奶茶借助刘强东的影响力，也顺利坐上了资本的牌桌，开始了亲自操盘投资的道路。这对于双方而言是双赢。</p><h3 id="张大奕和蒋凡："><a href="#张大奕和蒋凡：" class="headerlink" title="张大奕和蒋凡："></a>张大奕和蒋凡：</h3><p>​张大奕原本只是一个服装杂志的模特，本职工作就是穿搭展示。而当时的淘宝Top10女装店之一的“莉贝琳”的老板娘陈思佳选中了她成为“莉贝琳”的“淘女郎”，正是这项合作让张大奕走进电商的战场中。 2014年之后，原来“莉贝琳”的老板老板娘拉上张大奕三人创建了“如涵”，确定了公司未来的赛道，也就是<strong>“网红➕电商➕供应链”</strong>，此时张大奕已经实现了从「打工人」到「创业者」的华丽转变。</p><p>​当然，“如涵”的发展像所有初创企业一样，并不是一帆风顺。根据财报显示，2017年、2018年和2019年三年，张大奕淘宝店的收入占“如涵”的百分之五十以上，这样的傲人成绩是张大奕高强度营销所换来的。凭借淘宝卖货的巨额收入，“如涵”成功上市，张大奕在没认识蒋凡之前就靠着自己坐上了资本的牌桌。 </p><p>​接下来，就轮到蒋凡登场了。蒋凡在2018年才进入阿里集团的核心决策圈，所以，他并不是2019年曝出婚外情之后媒体描述成的“阿里太子”。而蒋凡和张大奕的婚外情带给张大奕和“如涵”的是沉重打击。蒋凡选择放弃她，她没能收获所谓“爱情”，同时自身形象受损，直播带货的成绩一落千丈。事实上，比较2019年的张大奕和蒋凡，他俩谁的资产更多还真不好说，毕竟张大奕是“如涵”的大股东，早已是资本牌桌的玩家了。从资本的视角看，她这段所谓“爱情”给她带来的只有负面影响。 </p><p>​后来，由于没有赶上新时代直播带货的浪潮和张大奕本人负面舆情，“如涵”主动退市，完成公司私有化转变，张大奕在这次退市中获得5320万美元，随后退出资本的牌桌。她的身价从最高点的6.8亿美元到5000多万美元，缩水程度令人瞠目结舌。 </p><h2 id="二、直播带货"><a href="#二、直播带货" class="headerlink" title="二、直播带货"></a>二、直播带货</h2><h3 id="薇娅和她老公："><a href="#薇娅和她老公：" class="headerlink" title="薇娅和她老公："></a>薇娅和她老公：</h3><p>​薇娅作为曾经的直播一姐，以偷税漏税13个多亿震惊全国。薇娅被封其实就是国家开始为这个行业制定标准，规范行业发展。这其实也<strong>标志着这个行业洪荒时代的结束</strong>，从此不再是各路诸侯上演全武行，取而代之的是行业龙头建立，行业壁垒显现，马太效应进一步增强。</p><p>​2022年一月，一个新的淘宝直播间悄然出现。这个直播间隶属“谦寻”，而这家公司就是薇娅老公的公司，专门负责供应链优化和直播选品。当月，该直播间重回淘宝月榜第一，宣布直播一姐成功转型幕后，王者归来！</p><p>​薇娅的资本化路线其实是做供应链整合和打造选品体系，不完全依靠她个人的网红身份。</p><h3 id="李佳琦："><a href="#李佳琦：" class="headerlink" title="李佳琦："></a>李佳琦：</h3><p>​李佳琦论专业能力肯定不是第一，但是他是第一个敢于吃螃蟹的人。在美妆带货这个领域，他<strong>本身自带男性身份的稀缺性，同时专业能力过硬，能说会道，长相姣好</strong>，在当时美妆直播带货领域这片蓝海中里面是第一个跑马圈地的人。</p><p>​除了上述的&#x3D;&#x3D;差异化&#x3D;&#x3D;和&#x3D;&#x3D;早入场&#x3D;&#x3D;两个优势以外，直播行业的不断蓬勃发展还使得以李佳琦为代表的第一梯队主播获得了第三个优势：&#x3D;&#x3D;议价能力&#x3D;&#x3D;。李佳琦自带巨大流量，使得面对品牌商有充足的议价能力，能够将价格压到最低，而低价的产品会给李佳琦带来更多的流量，这个正反馈就起来了。 </p><p>​不同于薇娅，李佳琦和他背后的美ONE公司并没有构建一套庞大而复杂的供应链体系，他们专注于做好销售渠道。<strong>两者之间的关系更像是重工业和轻工业的关系</strong>。 </p><p>​多说一句，直播带货能够便宜的本质是：品牌为了提高销售效率，向主播和消费者让渡了一部分利润，主播和消费者瓜分了这部分利润，所以我们觉得在主播那买货会更便宜。</p><h2 id="三、电竞游戏直播"><a href="#三、电竞游戏直播" class="headerlink" title="三、电竞游戏直播"></a>三、电竞游戏直播</h2><h3 id="古早时期（即是2009年开始）的初代游戏圈网红伍声09："><a href="#古早时期（即是2009年开始）的初代游戏圈网红伍声09：" class="headerlink" title="古早时期（即是2009年开始）的初代游戏圈网红伍声09："></a>古早时期（即是2009年开始）的初代游戏圈网红伍声09：</h3><p>​09是中国第一个DOTA世界冠军战队的功勋队长，他的火也来源于DOTA这个在当时人尽皆知的电竞游戏。受制于经济状况，09在获得世界冠军以后就转型成为一个视频创作者，专门做DOTA的视频。通过自身身份和视频风格，09获得了巨大的流量，并引流到自己的淘宝店铺转化为销量。与前面两种道路不同，前两种的都依赖于网红本人的「美」，而09的成功依赖于他「有技术」和「有意思」。 </p><p>​09通过视频引流电商，完成了原始资本积累。他开始想成为一名成功的商人，从流量变成资本，因此2012年到2014年他做了很多项目，也曾获得过一些融资，但这些项目最终都无疾而终。从2014年开始，他重新回到台前，开始直播游戏。只可惜DOTA的没落、游戏直播红利的错过让他无力回天。</p><h3 id="卢本伟和斗鱼："><a href="#卢本伟和斗鱼：" class="headerlink" title="卢本伟和斗鱼："></a>卢本伟和斗鱼：</h3><p>​卢本伟本身的出身很普通，但他遇到了一个游戏直播红利爆发的时代。凭借其夸张甚至带一点疯狂的直播效果， 迅速积累人气，成为斗鱼“一哥”。后来纯粹自己作死，人气膨胀以后脾气也膨胀了，教唆粉丝等一系列激进行为导致自己被封杀。</p><p>​透过卢本伟去看看他背后的金主：斗鱼的资本化过程。直播行业发展最快的那几年，市场竞争最为激烈，各大直播平台都在抢主播，本质上就是在抢流量，抢规模和抢发展。 在这样的竞争环境下，只有不断抢人，增加直播平台流量才能熬过其他对手，走到上市这一步。2019年在资本的撮合下，斗鱼和虎牙两家最大的直播平台选择合并，当然2021年国家反垄断局否决了这一项合并案。但是直播行业已经进入一家独大的形势，因为腾讯控股虎牙同时也是斗鱼的最大股东，因此<strong>游戏直播行业事实上已经是腾讯的一言堂</strong>。</p><h3 id="思考🤔"><a href="#思考🤔" class="headerlink" title="思考🤔"></a>思考🤔</h3><p>​根据上述两个例子，游戏直播的网红似乎还没有网红实现资本化的成功案例。几乎所有的游戏主播都是在给直播平台打工，最终都是直播平台实现了资本化，那么这是为什么呢？</p><h2 id="四、图文流量变现"><a href="#四、图文流量变现" class="headerlink" title="四、图文流量变现"></a>四、图文流量变现</h2><h3 id="咪蒙："><a href="#咪蒙：" class="headerlink" title="咪蒙："></a>咪蒙：</h3><p>​咪蒙的文章有一个很突出的特点，就是观点极其过激。我们作为普通人一般都是去批判咪蒙的价值观，但是从资本的角度来思考，咪蒙写文章的方式是非常成功的。</p><p>​我们回顾咪蒙的成功历程：在公众号文章群魔乱舞的混沌时代，作为南方系首席编辑出身的咪蒙充分发挥了自己二十年的写作功底，加上观点剑走偏锋，很快就积累了大量的原始粉丝。随着她在写文章领域的深耕细做，她成功写出了《致贱人》等爆款，凭借“语不惊人死不休”的话题，咪蒙的每一篇文章都能引发全网讨论，甚至是骂战，这就给她带来了源源不断的流量。 <strong>咪蒙本身养活了一批人，而骂咪蒙又养活了一批人，这是惊人的流量。</strong>在巨量流量的加持下，咪蒙的广告收入随之水涨船高，比不过顶流视频网红，但是在文字领域已经是顶峰了。</p><p>​当然，咪蒙成也萧何，败也萧何。剑走偏锋的选题可以帮助她一次又一次的抓住观众的眼球，但是这些年来大众对此积累的民怨只需要一根引线就可以即刻爆炸。《一个寒门状元之死》这篇文章最终送走了咪蒙，也彻底断了她的资本化道路。 </p><h3 id="欧神："><a href="#欧神：" class="headerlink" title="欧神："></a>欧神：</h3><p>​欧神是古早时期的文字网红，曾频繁活跃于水库论坛（这个论坛我听都没听说过😂）。 他的核心价值观就是：炒房。在那个房价启动螺旋上升模式的年代，他的思想和行为模式赚到了一大桶金，跟着他一起炒房的人同样如此，他也因此成为了早期金融领域的网红。</p><p>​他能够成为金融网红，同样离不开他细化，激进的炒房观点，加之当时时代背景下房价的不断上升同样在佐证他的观点。他变现的方式就是带粉丝的看楼盘，帮助开发商卖房子，从中赚取分成。</p><p>​随着房地产市场增速下降和监管日趋严格，欧神疯狂加杠杆炒房的行为➕带粉丝去西港炒房最终一地鸡毛事件最终葬送了他的网红生涯。</p><h3 id="同道大叔："><a href="#同道大叔：" class="headerlink" title="同道大叔："></a>同道大叔：</h3><p>​他的成功来源于敏锐地抓住了陌生男女的情感需求，探索出了陌生男女聊天聊什么这个问题的答案：星座。现在我们觉得聊星座挺土的，但在那个时期这是一个fashion topic。 2014年同道大叔在微博启动了星座话题的试水，得到了市场的积极正反馈。他开始在星座这条道路上发力，创作了很多有关星座的吐槽动漫形象。当然同期也有竞争对手，而同道大叔得以脱颖而出的杀手锏就是远超营销号的创作质量和高频的更新速率，这个优势让他成为了星座话题领域甚至两性情感领域的大网红。</p><p>​在他的网红窗口期，他积极流量变现，主要方式有：广告、星座动漫形象IP的衍生品（衣服、内裤等）的生产和销售、IP运营（主题 活动、综艺制作等等）。最后2017年，同道大叔底下公司被美盛文化收购，他本人直接套现1.75个亿，实现资本套利。 </p><h2 id="五、视频流量变现"><a href="#五、视频流量变现" class="headerlink" title="五、视频流量变现"></a>五、视频流量变现</h2><h3 id="Papi酱："><a href="#Papi酱：" class="headerlink" title="Papi酱："></a>Papi酱：</h3><p>​Papi酱早在2015年入局短视频，是短视频洪荒时代的入局者，吃到了行业尚未规范的第一波红利。她的短视频风格就是“吐槽”，而她能够从一众短视频博主中脱颖而出，靠的不止是她本身专业的表演能力，还有她视频中槽点的密集程度和精准度。</p><p>​后来的故事大家都知道了，Papi酱成为了千万级别的网红，不仅广告接到手软，更是和自己大学时期的好朋友杨铭创建了公司papitube，个人持股30%，坐上了资本的牌桌。而后papitube被泰洋川禾收购，Papi酱依然占据30%左右的股份，本身身价过亿肯定是没问题的。但是相比同道大叔，Papi酱在社交媒体上声量远大于对方，但是赚到的实实在在的钱却远不如对方，因为再怎么说，同道大叔是得到了真金白银的1.75亿，而Papi酱的财富目前还是纸面数据。</p><h3 id="暴走漫画："><a href="#暴走漫画：" class="headerlink" title="暴走漫画："></a>暴走漫画：</h3><p>​ 2007年，以王尼玛为代表的暴走漫画团队正式进入公众的视线范围之内。凭借出色的文案策划能力和别具特色的图文能力，暴走漫画迅速在优酷土豆积累了超过百万的粉丝。而接下来要考虑的就是如何将商业流量变现：卖周边产品、开发手游还有占据现金流最大头的广告收入。这些变现手段也让暴走漫画团队赚到了不少。</p><p>​从2012年开始，暴走漫画团队就开始接受资本投资，刚开始的规模比较小，一般都是几百万，随着暴走漫画的迅速火出圈，暴走漫画团队的身价也水涨船高。在2017年，某资本公司给出了40亿的估值。 当然，这也是暴走漫画的高光时刻了。一年后，暴走漫画团队陷入舆情风暴，由于监管政策的调整，国内言论自由的空间被压缩，暴走漫画也不得不调整了他们视频的方向，整个团队的人气开始下滑。不过之前吸收了大量的融资，暴走漫画团队依然还活着。</p><h3 id="日食记："><a href="#日食记：" class="headerlink" title="日食记："></a>日食记：</h3><p>​这是一个以做美食视频起家的网红博主，博主本身是影视行业的，后来进入视频行业算是降维打击。由于他拍摄的专业性，他的视频在美食这个垂直领域是最精致的，由此迅速火出圈。火了以后自然也开始想如何流量变现，日食记团队一开始也是走上了接广告的老路。广告是流量变现最直接的手段，虽然广告变现相对而言比较稳定，但是团队每年能接到的广告数量大差不差，因此这条路是有一个明显的天花板的。为了冲破天花板，日食记团队想到了另外一条变现的道路：电商。由于其精致的视频风格，电商带货也是主打精致美食和精致生活，这时候依靠视频积累下来的粉丝就成为了非常好的客户。这条道路他们走的相对顺利，这一点我们可以从他们背后的公司“罐头场文化”看出来，14年就开始拿了天使轮投资，后面资本市场一路加码，目前得到的投资也是超过一亿人民币。</p><h3 id="李子柒："><a href="#李子柒：" class="headerlink" title="李子柒："></a>李子柒：</h3><p>​李子柒是三农这个垂直领域的代表人物，另外一个是华农兄弟，华农兄弟本身在资本市场上没什么操作，就不讨论他们了。李子柒跟大部分网红一样，开局一副烂牌，自小父母离异，相继去世，为了养活自己，14岁就辍学进城打工。后来回乡下照顾奶奶，所以开始自己开网店卖一些农产品，做视频的初衷就是为了让自己的农产品更好卖出去。就这样拍着，一直不温不火，直到2016年《桃花酒》的小火，李子柒开始吸收到了第一波流量。 </p><p>​随着视频不断出圈，她自然而然吸引了很多MCN机构的关注，其中就包括了微念。在2016年9月说服李子柒和微念合作，并在同年11月，李子柒的《兰州牛肉面》大火。当然她的大火原因众说纷纭：有人说是因为她传播了中华传统古风文化，也有人认为她的视频满足了我们对于田园文化的美好幻想。这里就不再讨论了。</p><p>​<strong>回到流量变现这个角度，李子柒的流量变现完全抛弃了广告</strong>，这和绝大多数网红完全不一样。因为她专心于视频创作，商业化道路由微念来负责，而&#x3D;&#x3D;微念的商业化道路就是做品牌&#x3D;&#x3D;，相信李子柒这个品牌的酸辣粉呀、螺蛳粉呀大家都有所耳闻了。这条商业化道路其实是很传统的“代工+贴牌”模式，只不过这个品牌是通过李子柒的网红形象来塑造的。 李子柒的这条商业化道路是比较顺利的，2018年开始做品牌，一年半后网店的月营业额就破亿，2020年更是年销售额突破16亿，令人瞠目结舌。当然，背后的微念估值也是一路水涨船高， 一路来到了30亿。</p><p>​不过，李子柒本人还是存在一些问题，比如她本人对于资本市场几乎没有任何敏感度（从星期六股价连续暴涨但她没有任何收益中看出）。 她背后的老东家微念可是在这一轮的暴涨中吃的满嘴流油呀。 后来李子柒在面对资本市场动辄过亿的操作之下，惊叹之余也开始思考：这笔钱到底属于谁。因为李子柒本人没有微念的股份，而李子柒品牌是放在微念这个主体下的，因此收益都归微念所有，李子柒本人只能被动地等待分成，这对她而言是很不利的。因此她开始逐渐产生了跟微念对抗的想法。</p><p>​与微念的交锋分成几个回合：第一回合经历停更、报警和起诉等各种事情，双方各说各话。第二回合就是双方扯皮合同分配不均的问题。其实李子柒和微念的闹掰本质上就是利益分配不均：李子柒作为现象级网红，在舆论上拥有更大的话语权，而微念才是将李子柒品牌做起来的公司主体，完成了品牌供应链的从无到有，两者都觉得自己应该分到更多的利益，那么两者之间就会存在难以弥合的利益冲突。</p><p>​如今的局面已经是双输的局面了：目前李子柒本人和微念正在走法律程序，需要消耗天量的时间和财力物力，这段时间内，李子柒账号由于长时间没有更新，热度陡降，而微念的李子柒品牌销量大不如前且被字节收回了投资。</p><p>​穿透现象看本质，李子柒和微念的矛盾本质上是「做内容」和「资本化」的矛盾。李子柒是一个现象级IP，她本人对于在这个IP下的内容创作肯定有自己的想法，而微念的商业化运营在某种程度上影响了这个IP的创作能力和创作方向。李子柒本人在和微念撕破脸后，参加了很多央视举办的访谈节目，可想而知她有意探索李子柒这个IP更多的可能性，而不只是单纯的赚钱，或许在她能够收回李子柒这个IP之后，她能够得到更高层的支持，涅槃重生吧。</p><h2 id="六、审丑文化流量变现"><a href="#六、审丑文化流量变现" class="headerlink" title="六、审丑文化流量变现"></a>六、审丑文化流量变现</h2><h3 id="芙蓉姐姐："><a href="#芙蓉姐姐：" class="headerlink" title="芙蓉姐姐："></a>芙蓉姐姐：</h3><p>​同样的普通家庭出身，芙蓉姐姐一心想考上清华北大。连续两次失败并没有让她放弃，而是只身一人来到北京三战。芙蓉姐姐在三战期间开始在清华BBS中发表言论，一开始都是一些“求上岸”之类的考研经典锦鲤语录，后来一篇文章《北大，你是我前世最深最美的痛》爆火，让她第一次感受到了流量带来的正反馈。尝到甜头的她在网友的怂恿下，开始在论坛上放出自己的照片，由于自身外貌条件欠佳，她很快感受到了互联网上汹涌的恶意。“芙蓉姐姐”这个带有调侃性质的名号也是在这时安在了她的头上。</p><p>​但是不得不佩服芙蓉姐姐对于网红和流量的嗅觉，她很坦然的接受了这个设定，并开始大规模接商演，摆出她经典的pose，吸引了一大波流量。同时她还公开发表一大票具有争议性的言论，比如什么“我好委屈，因为我的美丽过于前卫，没有人能欣赏的了”之类的，不出意外收获了一大波负反馈。但正所谓，<strong>“黑红也是红”</strong>，负反馈带来的流量也是可以变现的。当然，审丑文化流量变现的弊端也很明显，那就是<strong>“社会关系死亡”</strong>。当你被群嘲时，其实没有人愿意接近你的，这就是社会中的“明哲保身”。后来芙蓉姐姐有了孩子，逐渐淡出互联网，她没能实现网红身份的资本化，但是至少衣食无忧，赚到了普通人难以赚到的金钱。</p><h3 id="罗玉凤："><a href="#罗玉凤：" class="headerlink" title="罗玉凤："></a>罗玉凤：</h3><p>​出生自带同样的一手烂牌，生活拮据，父母离异。后来靠自己读大学，毕业以后成为了一名小学教师。当时互联网浪潮刚刚兴起，罗玉凤也是其中高强度冲浪的一员，开始频繁活跃在各大论坛。让她出名的是一则征婚贴《我想找一个北大清华男结婚》，其中她自身条件和期望对象的条件的悬殊对比引来了群嘲。当然，这其实是很直接的营销手段，通过语出惊人的言论和征婚这个桥梁让大众认识了自己，进而走进公众视野。</p><p>​后来，罗玉凤凭借“往前推三百年，往后推三百年，总共六百年，没人能超越我”这番经典言论，彻底吃掉了审丑文化流量的大头，红极一时。得到流量的罗玉凤开始参加各类节目、综艺，赚了一大笔钱。甚至借助审丑文化的巨大流量，让凤姐接到了广告，30万的广告费，在当时属于网红的顶级水平了。凤姐是一个极其擅长整活的人，她在扮演小丑这条路上是非常专业的。<strong>当然审丑文化带来的流量只能让她赚点小钱，坐不上资本的牌桌</strong>，而她也因为审丑文化流量的副作用彻底失去了正常的社会关系。</p><p>​此时她的心理开始扭曲，认为她被社会抛弃是因为中国社会不行，所以她要去美国。去到美国以后，虽然自己混的不怎么样，但还是千方百计地抹黑中国，由于她中国人、自带巨大流量、反抗“中国专制暴政”等各大buff叠满了，西方媒体开始注意到了这个中国女人，针对凤姐的经历和言论写了一篇反华政治意义的文章。当然，这些文章的影响力也只在美国的华人圈有一点影响力，凤姐在美国更不好混。</p><p>​因此她回到了中国，尝试了很多流量商业化的举措，比如加入凤凰新闻、开公众号写文章、继续发表极端言论吸引关注，最后也是无功而返。赚不到钱也无法资本化，审丑文化这条路走到这算是到头了。</p><h3 id="杀马特群体："><a href="#杀马特群体：" class="headerlink" title="杀马特群体："></a>杀马特群体：</h3><blockquote><p>这部分结合了当时社会背景，思考了个人成长、社会和劳动的关系，其中涉及到的远远不止网红和资本的关系。</p></blockquote><p>​这个群体没有一个特别突出的领头羊，但是他们作为一个整体确实成为了审丑文化的一大组成部分。这个群体成员普遍是来自乡镇地区的进城务工青年，他们很年轻，因为种种原因读到中学就出来打工，没有一技之长，在城市的底层摸爬滚打。<strong>社会、学校和家庭在他们的成长路上集体失位</strong>，他们只能靠自己生活下去，因此形成了自己内部圈层的亚文化：杀马特。</p><p>​杀马特的典型标志就是那一头五颜六色、形态各异的头发，这种头发在社会看来是「坏孩子」的象征，而<strong>「坏孩子」是不会被欺负的</strong>，这也是杀马特家族的初衷。也许是早早走入社会，受尽欺凌，让他们有了团结一致抵御欺凌的信念，其实这有点像早期工会的形态。杀马特群体作为一个早期工会雏形，第一可以解决失业：哪个家族的人被工厂炒鱿鱼，就会有其他家族的人介绍工作；第二就是很强的抱团能力，可以集体向工厂提出利益要求（其实也就是基本工作权益罢了，打工人的血泪史呀）。</p><p>​杀马特群体逐渐出圈，也开始被主流群体所审视，自然免不了嘲讽和戏谑。由于杀马特群体本身文化程度低，他们与城市主流群体在文化上的代沟，让他们无法为自己辩解，只能用显眼的发型和开机车炸街的行为来吸引他人注意，增强群体内部的凝聚力。虽然杀马特群体相较于资本家属于弱势群体，但是其本身带有一点黑社会性质，他们自诩「弱势群体互帮互助」，但是会联合起来欺压更弱势的群体，比如：刚从小镇来到城市一无所有的小青年。这种欺压弱小带来的满足感让杀马特群体越发膨胀，甚至不少激进派越过了社会的红线。</p><p>​由于杀马特群体对社会治安的破坏愈发严重，主流群体眼中已经容不下他们了，开始了针对杀马特群体的清除。由于受到全体公民的语言侮辱和攻击，杀马特群体只是在中国城市化进程中昙花一现，很快便归于平静。令人遗憾的是，<strong>这个群体本身已经发展成为工会的雏形</strong>，却没有一个天降猛男引导他们建立合适的制度来统一管理，反而是一盘散沙。</p><p>​站在上帝视角来看，<strong>杀马特群体的昙花一现本质上是一个没有享受到中国崛起发展红利群体的发声</strong>，顺着时代经济发展这条脉络，很多现象的产生都有其必然性。这个群体在某种意义上也是一代网红，但是没有流量变现，更没有资本化，不仅是因为这个群体没有代表性人物出现，更是因为这个群体出现的根本目的不过是「少受欺负」。</p><h2 id="七、抽象文化流量变现："><a href="#七、抽象文化流量变现：" class="headerlink" title="七、抽象文化流量变现："></a>七、抽象文化流量变现：</h2><blockquote><p>这部分更偏心理学分析。抽象文化在当今社会上依然占有一席之地，因此在这个部分「巫师财经」对抽象文化的产生、发展和壮大做了深刻的思考。</p></blockquote><h3 id="抽象文化介绍"><a href="#抽象文化介绍" class="headerlink" title="抽象文化介绍"></a>抽象文化介绍</h3><p>​抽象文化本质上起源于比审丑文化更深一层的对于人性阴暗面的需求。<strong>如果说审丑文化迎合了大众对于猎奇外表的好奇心，那么抽象文化就迎合了大众对于扭曲内在的好奇心。</strong>早期的百度贴吧就是这样的一个地方，在匿名的发言环境中，你的发言越抽象，就越会得到别人的追捧。现实中的小透明能通过抽象发言在互联网上获得“指点江山，激昂文字”的地位，这吸引了无数渴望得到关注的普通人拥护并效仿。</p><p>​抽象文化和审丑文化最大的区别就在于，吃审丑文化流量的主播本身很多行为就是小丑，而吃抽象文化流量的主播更多的是在扮演小丑。</p><p>​抽象文化的一大特点就是「攻击」，大家想看的是攻击以后的后续和发酵。因此抽象文化起源于贴吧，但是在直播和视频时代得到了发扬光大，最本质的原因是直播的弹幕功能。弹幕功能可以对主播的抽象发言和行为实时反馈，这就是节目效果的核心所在。在抽象文化直播间（比如李赣、孙笑川）中，<strong>观众既是内容的生产者（弹幕），也是内容的消费者</strong>，而主播只是引导者而已。</p><p>​抽象文化粉丝群体聚合在一起确实给当时不够成熟的直播平台（指斗鱼）带来了巨大的流量，但是成也流量，败也流量，这股巨大的流量是极其不可控的。他们在斗鱼的各大直播间横行霸道，挑起了各大主播与抽象文化主播的矛盾，动摇了斗鱼的根基。因此斗鱼下定决心要打压，加大对抽象文化的监管力度。</p><p>​抽象文化的另外一大特点就是「荒诞」，其中的典型例子就是孙笑川的“坏事做尽系列”。简而言之，就是孙笑川的粉丝们会在各种负面事件底下评论这些事件的凶手就是孙笑川，听起来很荒诞离谱，但是这就是这群粉丝“找乐子”的方式，<strong>正所谓“娱乐至死”</strong>。抽象文化的粉丝是非常特殊的，他们热衷于搞死他们追捧的主播，手段包括但不限于造谣（孙笑川“坏事做尽”）、冒充主播去喷其它明星名人（孙笑川和陈冠希的世纪骂战），李赣和孙笑川都没能逃过这个命运。曾有主流媒体批评孙笑川没能管理好自己的粉丝，事实上，是粉丝在操纵孙笑川，孙笑川本人不过是抽象文化的傀儡罢了。</p><p>​抽象文化的第三大特点是「叛逆」。为了防止自己的亚文化被主流文化兼并，抽象文化的粉丝们非常天才地使用所谓的“抽象语言”在互联网上进行发声。所谓抽象语言，就是抽象话和emoji表情，这是抽象文化的一大标志，甚至在今天部分融入到主流文化的互联网用语中（比如用郭嘉代替国家规避审查，这种用法在一定程度上是有益的）。这让我不得不感慨，人类在「说脏话」这件事情上可谓是天赋异禀。</p><p>​&#x3D;&#x3D;抽象文化主播的流量变现途径是非常有限的&#x3D;&#x3D;，由于他们粉丝的特殊性，他们不可能接得到广告和代言，也很难通过直播带货来变现，唯一的途径就是和平台的签约合同，其实也就是平台给的“工资”。而随着平台发展日趋成熟加上监管越来越严，抽象文化在明面上的部份逐渐凋亡，在大众视野里面逐渐淡化。</p><h3 id="抽象文化本质是什么？"><a href="#抽象文化本质是什么？" class="headerlink" title="抽象文化本质是什么？"></a>抽象文化本质是什么？</h3><p>​我们可以探究一下抽象文化的本质和起源。首先，我们作为社会性动物，绝大多数人都在现实大众面前展示出一个较为良好的形象，这并不是我们本质的内在，而是我们给自己戴上的“人格面具”，<strong>目的就是获得大众对自己的正面评价，迎合社会主流价值观。</strong>但是在互联网上，特别是匿名的情况下，有人就会选择剥下“人格面具”，释放自己的“阴暗面”，以换取本性彻底释放的快感。结果有人发现释放“阴暗面”可以给自己带来巨大的流量甚至是金钱，他们就选择向观众释放更多“阴暗面”，从而把一群同样热衷于释放“阴暗面”的粉丝聚合在一起，最终形成了抽象文化。</p><p>​根据荣格的理论，我们的心灵有主次人格之分，主人格就是我们平时在现实生活中所展示的那一面，即所谓的“人格面具”，而次人格就是我们在匿名的互联网中所展示的那一面，即所谓的“阴暗面”。两个人格之间是相互依存的关系。一般来说我们由主人格主导，正如我们平时都戴着“人格面具”，而通过抽象文化IP（比如孙笑川等抽象文化代表人物）来释放自己的“阴暗面”。<strong>但是抽象文化可以通过影响次人格，进而影响主人格</strong>，一个非常经典的场景就是：我们时常会把网络上的一些口嗨脱口而出地代入到生活的场景中。这时候提出第三个概念：“自性”，“自性”是我们调和“人格面具”和“阴暗面”的天平，它的存在帮助我们如何分清“抽象”的界限，即<strong>“什么情况下抽象仅仅只是口嗨，什么情况下抽象是逾越了道德和法律的红线”</strong>。那些在现实生活也高举抽象大旗的人就是他们的“自性”天平压到了“阴暗面”那一边。</p><p>​最后，我们辩证地看待抽象文化的出现。抽象文化固然给社会和互联网舆论风气带来了不良的影响，但在一定程度上缓解了社会矛盾。为什么呢？作者的理论很有意思，他说：热衷于抽象文化的人大多生活在社会的中低层，他们在社会摸爬滚打，早早认识到社会本身的不公，但是没有能力改变现状。因此他们对那些网络上光鲜亮丽的明星名流们产生了嫉妒愤恨的情绪。因此他们靠在网络上匿名输出抽象言论，攻击别人，获得快感，最终的结果就是让他们对社会的不满情绪只在网上发泄，而不是在现实生活中破坏社会安定。</p><h2 id="八、小号圈"><a href="#八、小号圈" class="headerlink" title="八、小号圈"></a>八、小号圈</h2><p>​所谓的小号圈，其实就是网红自己打造的个人IP，主要方式有微信群等等。小号圈的网红不在公共平台上赚取巨额流量大多是因为他们宣传的价值观不能放到阳光下展示。比如一些小号圈女网红教别人如何使用自己的身体赚钱等等。他们的<strong>流量变现模式就是卖课、卖会员，然后做相关产品的推广</strong>。比如女网红教其他女生如何钓男人，首先就是变美，而变美的方式包括医美和健身，那么就可以做医美产品和健身课程的推广赚钱。</p><p>​早期小号圈里面主要就是女网红，她们有的非常成功，钓到了大鱼，成功上岸。这里面体现出来一种资本化道路，类似奶茶妹妹的道路，那就是通过婚姻绑定一个男人，然后获取资源甚至是资本，只不过她们的手段更加不符合大众的道德观。现如今的小号圈大多都是故事会了。</p><p>​我们能够看到，除了那些在公开平台上光鲜亮丽的网红，还有很多网红在看不到的角落里面拼命地赚钱，无所不用其极的完成阶级跨越。这时候，我们想想，似乎女性网红总绕不开“依附男人”这个核心，无论是正大光明的还是见不得人的，部分女性网红都想通过性别价值来赚钱，这是为什么呢？<strong>其实本质上还是我们的社会文化氛围的影响，社会中有很大一群人评价一个女性，要看“有多少男人喜欢她，以及喜欢她的男人有多喜欢她”，通过这种方式来衡量一个女性的价值，而不是她本身。</strong></p><h2 id="九、下沉市场"><a href="#九、下沉市场" class="headerlink" title="九、下沉市场"></a>九、下沉市场</h2><h3 id="快手的牌牌琦："><a href="#快手的牌牌琦：" class="headerlink" title="快手的牌牌琦："></a>快手的牌牌琦：</h3><p>​牌牌琦的发家离不开快手的“师徒机制”，所谓“师徒机制”就是大流量主挖掘新人，带这些新人成为小流量主，不断做大流量蛋糕，从而帮助新人度过一开始最为艰难的“冷启动”时期。接下来牌牌琦就需要开始思考如何吸引更多人的眼球，获取更大的流量。他选择了“社会摇”这种下沉市场的表现形式。</p><p>​“社会摇”这种形式不是牌牌琦所创造的，而是由他发扬光大的。“社会摇”这种表现形式在主流社会看来，很土，一副城乡精神小伙的标配，但是土不代表容易。事实上，要把“社会摇”练到整齐划一是需要费很多苦功夫的，而牌牌琦在这个赛道上付出了不少努力。他在“社会摇”这种下沉市场里面用上了入门级的专业手法（包括：统一的服化道、整齐划一的动作设计、更专业的拍摄手法），走出来差异化道路，在“社会摇”这片红海中杀了出来，吃到了其中最大的流量蛋糕。</p><p>​既然获得了巨大流量，下一步就是思考商业化道路。作为下沉市场的大网红，做体面的大品牌代理人这条路显然是走不通的，因此牌牌琦选择了另外一条的商业化道路：<strong>“网红孵化”</strong>。利用“师徒机制”，牌牌琦可以作为最大的流量主，带动他手下的徒弟获得流量（也就是培养了很多小流量主），通过彼此之间的互动可以吸引更多的关注，从而获取更多的流量和利益，同时徒弟起来以后（也就是徒弟成功获取一定的流量），牌牌琦就会从他的直播收入和视频收入中抽成。通过这种模式，牌牌琦打造了一支“牌家军”（许多网红帐号都挂着“牌家”的标志，均属于牌牌琦的麾下）。</p><p>​盛极必衰，随着“社会摇”不断出圈，主流媒体的审视和批评也接踵而至。官方媒体认为“社会摇”过度娱乐化，违反了基本的社会良俗秩序，甚至触碰法律道德的底线。这个盖棺定论的声明导致牌牌琦被封杀，所有作品均被下架。当然，他的流量和“牌家军”被他的妻子小伊伊继承，虽然不复往日盛况，但是依旧保留了相当的人气。虽然牌牌琦完成了从普通人到高净值人群的阶级跃升，但是受限于他本身的视野，他并没有多少资本市场上的操作。</p><h3 id="辛巴："><a href="#辛巴：" class="headerlink" title="辛巴："></a>辛巴：</h3><p>​跟上述所讲的几位网红一样，他也是属于天崩开局：成绩差，早早辍学打工，成为中国城市化浪潮下的底层青年。后来他去日本做生意，做的绘声绘色，虽然最后由于非法雇佣留学生被日本警方遣返，但是由此可见辛巴的做生意的天赋。从日本回来以后，在当时电商、直播的大背景下，他选择了在快手直播带货。开始的“冷启动”时期总是难过的，不同于“师徒制度”，他选择了另外一条道路：去各大主播的直播间刷礼物，刷到榜一榜二，然后让主播给他引流。这番操作下来，他成功度过了“冷启动”时期，直播间卖出的货物金额越来越高，因此他开始<strong>建设供应链</strong>。供应链的建设方式就是几乎所有头部主播的惯用方法：借助自身的流量获得议价权，加之采购规模大，订单稳定且账期短，很多工厂都愿意深度绑定，锁定产能并接受较低的价格。</p><p>​由于辛巴确实提供了一些性价比高的产品，他也被三四线居民认为是“平民英雄”，自此“专注于下沉市场”的标签就被贴在了他的身上。辛巴本人的带货成绩非常亮眼，在直播带货最火的时代，他是李佳琦和薇娅之下的第三人，同时他自己还培养其他带货主播，同样非常出色。辛巴团队的主流目标客户就是来自三四线城市的居民，他们最需要的就是物美价廉的商品。我们要承认，三四线城市的部份商品（比如化妆品之类）在当地售卖的价格确实比较高，正是因为商品运送到当地是需要多个经销商的，这些中间环节吃掉了很多利润，而辛巴所做的就是减少了这些中间环节的利润，让三四线居民切切实实得到了利益。不过后来，辛巴团队由于“燕窝事件”翻车，损失惨重，还遭到了平台六十天的封禁。背后的直播平台快手正在冲刺港股上市，不能被辛巴的负面新闻影响，也在有意地减少辛巴团队对于平台的反向控制，在辛巴团队解禁以后，限流等措施轮番上阵，肉眼可见的辛巴团队的月平均销售额从13亿下滑到7亿，被后起之秀反超。</p><p>​当然，辛巴本人是一个比较有远见的人，和牌牌琦之流不同。他在资本市场上是有操作的，2020年和上市公司盛讯达签了对赌协议，帮助盛讯达做直播业务，而他本人也获得了该公司0.92%的股份。后来辛巴团队还斥资上亿元购入起步股份5%的股份，算是正式坐上了资本的牌桌。不过他在资本市场上的路并没有走的顺利，收购起步股份后面亏本减持，还是要依靠直播带货来维持现金流。</p><h2 id="十、真人秀综艺"><a href="#十、真人秀综艺" class="headerlink" title="十、真人秀综艺"></a>十、真人秀综艺</h2><p>​通过参加真人秀综艺（比如令人心动的offer），选手们能够获得成为网红的机会，有机会实现流量的商业化甚至是资本化。而真人秀综艺的问题是：（1）网红的的人设飘忽不定，节目产出网红的能力不稳定；（2）一个只有人设的网红IP想要成为一个有作品的网红IP并不容易。因此大部分参加综艺的素人选手最后大多都是以“高级打工人+兼职网红”的形态出现的，由此可见综艺IP内容长期输出能力是很容易遇到瓶颈的。</p><p>​虽然通过综艺制作的网红们大多在这条道路上并没能走得更远，但是其中一条道路经过验证是比较好走的，那就是情侣日常VLOG。这其中的原理就是：磕CP是大众的刚需。我们继续往下深入思考一层。网红其实是通过情侣日常VLOG给观众提供了情绪价值，让大家感觉到“爽”。“爽”就是内容行业的本质，通俗来讲，凡是让人类可以感觉到“爽”的事情，都是可以被标价的，而内容行业就是做这样的事情，刺激大众的大脑，把大众对于内容的注意力变成看得见摸得着的钞票。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>​以奶茶妹妹为代表的图文时代网红到以薇娅李佳琦为代表的视频时代网红，背后离不开互联网基础设施的发展。网速提高、流量降费、智能手机等终端产品的普及等等互联网的发展成果是网红赖以生存的基石。而网红常用的变现手段包括：婚姻、直播带货、直播打赏、平台工资、广告、相关IP衍生品的销售、建设自有品牌、卖课或者会员等等，其中能实现资本化的道路只有两条，一条是婚姻（可遇不可求），另外一条是开电商公司。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 金融 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Pages+Hexo=个人免费博客</title>
      <link href="/2024/01/18/GitHub-Pages-Hexo-%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/01/18/GitHub-Pages-Hexo-%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="个人免费博客搭建（基于GitHub-pages和Hexo）"><a href="#个人免费博客搭建（基于GitHub-pages和Hexo）" class="headerlink" title="个人免费博客搭建（基于GitHub pages和Hexo）"></a>个人免费博客搭建（基于GitHub pages和Hexo）</h1><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><h3 id="一、简单认识GitHub和Hexo"><a href="#一、简单认识GitHub和Hexo" class="headerlink" title="一、简单认识GitHub和Hexo"></a>一、简单认识GitHub和Hexo</h3><p>​1、Git是一个分布式<strong>版本控制系统</strong>，它会记录所有对项目文件的更改（比如一个文件，前天加了三段文字，昨天删了一句话，今天改了几个词，这三个版本历史都能保存下来）。而GitHub是是使用Git这个工具的<strong>软件源代码托管服务平台</strong>。</p><p>​2、根据官网的介绍，Hexo是一个快速、简洁且高效的博客框架。利用这个框架，我们可以很方便地搭建属于自己的博客。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 </p><h3 id="二、环境配置"><a href="#二、环境配置" class="headerlink" title="二、环境配置"></a>二、环境配置</h3><p>​1、安装Hexo前需要安装Node.js、Git，因为Hexo是基于Node.js写的，而Git可以方便我们进行文章的推送和版本控制：</p><p>​打开终端，输入下面的指令，安装Node.js：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>（如果你不知道brew指令，说明你可能没有安装brew这个包管理工具，建议参照 <a href="https://zhuanlan.zhihu.com/p/372576355">MacBook使用笔记：安装Homebrew（M1）</a>）</p><p>​⚠️ 我用的是上述链接中的国内安装方法，其中在配置环境这一块有一点坑，特此记录下来：</p><p>​下载Homebrew以后，脚本会提示你执行<code>source /Users/「你的用户名」/.zprofile</code>后brew指令才能生效 ，因为这个脚本将brew的环境配置到.zprofile中，因此需要先执行一次.zprofile文件。建议可以将这一条命令写入到.zshrc中，因为我们每次打开终端，都会执行一次.zshrc，就避免了重复输入命令。如此一来，你每一次打开终端，都可以使用brew。具体操作流程就是：</p><p>​在你的默认目录下打开终端，输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open .zshrc</span><br></pre></td></tr></table></figure><p>​这样会打开一个名为<code>.zshrc</code>的文本文件，然后在文件里面写入<code>source /Users/「你的用户名」/.zprofile </code>，保存以后关闭文件，最后输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .zshrc</span><br></pre></td></tr></table></figure><p>​这样就完成了。</p><p>2、安装Git：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure><p>3、安装Hexo：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>BTW：如果你不知道npm指令，这里做一个简单的介绍</p><blockquote><p>​npm指令跟前面安装的Node.js有关，它伴随着Node.js一起下载。Node.js是一个基于V8引擎的JavaScript运行环境，而npm是Node.js的软件包管理器，主要功能如下：</p><ol><li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li><li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li><li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ol></blockquote><h3 id="三、使用Hexo搭建一个人博客"><a href="#三、使用Hexo搭建一个人博客" class="headerlink" title="三、使用Hexo搭建一个人博客"></a>三、使用Hexo搭建一个人博客</h3><p>1、新建文件夹</p><p>​这个文件夹的位置和命名都依赖于大家个人喜好，我文件夹路径是<code>/Users/lhl/LHL个人博客</code>，以此举例。</p><p>2、初始化博客</p><p>​首先需要在终端进入到<code>LHL个人博客</code>目录下，两个方法：一个是执行<code>cd /Users/lhl/LHL个人博客</code>，另外一个是直接右击<code>LHL个人博客</code>文件夹，选择“进入终端”（该方法需要安装「超级右键」这个Mac的神级app，大家自行了解吧～）</p><p>​接下来在终端输入初始化命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>​在终端上看到下图的提示，就说明初始化成功啦！</p><img src="/2024/01/18/GitHub-Pages-Hexo-%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/image-20240109152618006.png" class="" title="image-20240109152618006"><p>3、启动Hexo</p><p>​在终端继续输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>​看到下图的提示就说明成功了</p><img src="/2024/01/18/GitHub-Pages-Hexo-%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/image-20240109152843648.png" class="" title="image-20240109152843648"><p>（因为我是第一次搭建个人博客，因此计算机端口没有被占用的情况，如果在这一步提示端口被占用，可以参照「参考文献」中的[1]）</p><h3 id="四、部署到GitHub"><a href="#四、部署到GitHub" class="headerlink" title="四、部署到GitHub"></a>四、部署到GitHub</h3><p>1、登录github：<a href="https://link.zhihu.com/?target=https://github.com/">https://github.com</a>，如果没有账号的话可以新建一个（自行了解如何做），创建一个仓库New repository，仓库名必须为：<code>昵称.github.io</code>，输入仓库的描述，最后创建。具体如下图所示：</p><img src="/2024/01/18/GitHub-Pages-Hexo-%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/image-20240109155725693.png" class="" title="image-20240109155725693"><p>2、如果此时你的终端还是在运行Hexo，输入<code>ctrl+c</code>，可以退出。如果不是的话，就进入到<code>LHL个人博客</code>目录下，安装git部署插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>（这个插件是为了方便我们将本地的“LHL个人博客”通过git指令远程连接到GitHub页面）</p><p>3、更改“LHL个人博客”文件夹下的_config.yml文件</p><p>​更改的方式有两种：一种是可以借助IDE（比如VScode、Pycharm）这类工具打开文件，直接在其中修改；另外一种是使用命令行来修改（我不太了解怎么用，可以参考其他文章），这里我使用VScode打开文件来修改。</p><p>（1）修改site</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Blog</span> <span class="string">of</span> <span class="string">LHL</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;LHL的个人小天地，记录自己的成长&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Liang</span> <span class="string">Henglong</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>title</strong>：网站的名字，会写在hexo generator命令生成后的public文件夹下的index.html文件的title标签里，我把它改成“Blog of LHL”。</p><p><strong>subtitle</strong>：网站的副标题，生成的时候默认为空。</p><p><strong>description</strong>：主要用于SEO（搜索引擎优化），告诉搜索引擎一个关于站点的简单描述，在官方文档中建议在这段描述中增加自己的一些关键词。写这个description是为了提高我们个人博客网页在搜索引擎中的排名，让更多的人可以看到，我暂时没有这个需求。我把它当作个性签名来用了，正如个性签名中说的：开这个博客的目的不过是“记录自己的成长”罢了。<br><strong>keywords</strong>：网站的关键词，使用半角逗号分隔开多个关键词，关键词对SEO的优化有一定的作用<br><strong>author</strong>：顾名思义就是作者，这个也只是署个名而已。我改成了自己的名字。<br><strong>language</strong>：这里就写了网站使用的语言，我改成了zh-CN（也就是简体中文）<br><strong>timezone</strong>：网站对应的时区，一般情况下不用去刻意配置，会默认使用电脑的时区，但如果发布到其他地方的服务器，可能会使用当地服务器的时区，此时如果有需要用到本电脑的时区就要手动设置时区了，一般中国的时区可以设置为Asia&#x2F;Shanghai</p><p>⚠️ 大家可以根据自己的需求来修改这个部分，不改也不会影响博客的搭建</p><p>（2）修改deployment</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:「你的GitHub用户名」/「你的GitHub用户名」.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>这一步的目的是让我们可以使用Hexo框架将博客的内容推送到GitHub Pages。</p><p>（3）修改URL</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://「你的用户名」.github.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br></pre></td></tr></table></figure><p>将网站网址url改成你的个人博客网址（这个网址是GitHub Pages为你自动生成的），然后增加一个&#96;root: &#x2F;，这一步的目的是为了我们的远端地址可以正常显示主题样式（所谓的主题样式，可以参考本文的**<u>第五点</u>**）</p><p>4、将本地的个人博客部署到GitHub Pages页面</p><p>​在前面的第3步的（2）中，我们修改了<code>git@github.com:「你的GitHub用户名」/「你的GitHub用户名」.github.io.git</code>，为了使得这条代码生效，我们需要配置SSH用于远程连接我们个人电脑和GitHub。因此我们首先需要配置SSH，具体操作步骤可以参照 <a href="https://blog.csdn.net/weixin_44786530/article/details/130482050">mac配置ssh 到github</a>。确定我们的电脑可以远程连接GitHub以后，进入下一步。</p><p>​<code>LHL个人博客</code>目录下进入终端，输入部署命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>​最后部署成功的页面如下所示：</p><img src="/2024/01/18/GitHub-Pages-Hexo-%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/image-20240117201331438.png" class="" title="image-20240117201331438"><p>五、前端界面设置（Hexo主题的使用）</p><p>1、选择前端主题风格：<a href="https://link.zhihu.com/?target=https://hexo.io/themes/">https://hexo.io/themes/</a>，有很多主题可供选择，自己喜欢的最重要</p><p>2、以我自己用的主题举例如何“借用”其他大佬做的前端界面，下面是我用的主题butterfly</p><img src="/2024/01/18/GitHub-Pages-Hexo-%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/image-20240110144308365.png" class="" title="image-20240110144308365"><p>这个主题在GitHub上有6.3k🌟！具体链接是：<a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a></p><p>⚠️ 对于不同的主题，下面的步骤都是通用的，只不过需要注意一些小细节。但是根据我自己配置的经验来看，如果对这个前端知识不太了解的话（没错，说的就是我自己），最好是不要选择小众主题，因为小众就意味着安装过程中可能会遇到很多问题，且难以解决。</p><p>（1）第一步在“LHL个人博客”目录下进入终端，输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>选择的主题不一样，这里clone命令后面跟的网址不一样，具体参照不同主题的ReadMea.md文件</p><p>安装完以后，在themes目录下就会多一个文件，如下图所示。这个文件的名字同样跟你选择的主题有关。</p><img src="/2024/01/18/GitHub-Pages-Hexo-%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/image-20240110125413487.png" class="" title="image-20240110125413487"><p>⚠️ 有一些下载指令不会把主题文件下载到themes文件夹中，而是下载到根目录里面，比如在我这里就是“LHL个人博客”，所以在修改前要将主题文件放入“theme”文件夹中。</p><p>（2）修改**<u>主页面</u>**（不是butterfly文件夹下的）的_config.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>（3）根据主题的其他要求做好相应的配置，由于每个主题的配置细节不一样，这里就不做展开了。</p><p>（4）应用主题</p><p>在终端上输入以下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean # 清理缓存</span><br><span class="line">hexo g  # 生成</span><br><span class="line">hexo s  # 启动</span><br></pre></td></tr></table></figure><p>此时我们就可以在自己的本地端口查看到个人博客的界面啦</p><p>（5）将主题部署到GitHub Pages</p><p>首先输入<code>ctrl+c</code>退出，然后输入命令推至GitHub Pages：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d  # 部署</span><br></pre></td></tr></table></figure><h3 id="六、写博客"><a href="#六、写博客" class="headerlink" title="六、写博客"></a>六、写博客</h3><p>回到我们最初的目的，搭建这个博客最终都是为了给自己提供一个可以写东西的地方。其实搭建后以后写博客就很容易啦，不过由于没有良好的后端管理平台，我们仍然需要借助命令行来完成这一步。以我自己的博客举例</p><p>首先输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &#x27;博客标题&#x27;</span><br></pre></td></tr></table></figure><p>这样就会在<code>/Users/lhl/LHL个人博客/source/_posts/</code>这个目录下生成一个<code>博客标题.md</code>文件，我们就可以在这个文件中使用Markdown语言来写博客了（Markdown语言非常强大，大家自行了解喔，对于程序员来说绝对是必修课～）</p><p>写好博客以后，就输入<code>hexo g</code>生成博客文件，最后输入<code>hexo d</code>将博客更新到我们的个人网站。</p><h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><p>[1] <a href="https://zhuanlan.zhihu.com/p/114195340">GitHub Pages + Hexo免费搭建个人博客_Mac</a></p><p>[2] <a href="https://zhuanlan.zhihu.com/p/627712011">一篇文章搞定什么是nodeJs它和NPM关系与项目应用</a></p><p>[3] <a href="https://blog.csdn.net/zemprogram/article/details/104288872">个人博客搭建笔记—-hexo根目录下的_config.yml配置解释</a></p><p>[4] <a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-butterfly</a></p><p>[5] <a href="https://blog.csdn.net/weixin_44786530/article/details/130482050">mac配置ssh 到github</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023/11/29 宏观经济分析</title>
      <link href="/2024/01/10/2023-11-29-%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%88%86%E6%9E%90/"/>
      <url>/2024/01/10/2023-11-29-%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="2023-11-29-宏观经济分析"><a href="#2023-11-29-宏观经济分析" class="headerlink" title="2023&#x2F;11&#x2F;29 宏观经济分析"></a>2023&#x2F;11&#x2F;29 宏观经济分析</h1><p>⚠️ 本篇文章是本人根据原视频内容进行总结的，其中包含原视频内容的要点和一点点个人的主观想法，仅供大家一起学习</p><p>❗ 主要观点来自「东北证券首席经济学家」付鹏</p><p>🔗 视频链接：<a href="https://www.bilibili.com/video/BV1ac411d73E/?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=dc147d1200726845504a03a7da97c364">2023年11月2日，宏观经济分析与展望（完整）</a></p><h2 id="经济底悄然已过，债务压力犹存"><a href="#经济底悄然已过，债务压力犹存" class="headerlink" title="经济底悄然已过，债务压力犹存"></a>经济底悄然已过，债务压力犹存</h2><h3 id="2000-2002-加入世贸协定以后"><a href="#2000-2002-加入世贸协定以后" class="headerlink" title="2000-2002 加入世贸协定以后"></a>2000-2002 加入世贸协定以后</h3><p>1、经济有一波非常好的增长，其中一个原因就是居民部门从两个角度看都是良好的：居民杠杆率水平较低，负债发展经济的空间较大；人口处于上升期，人口红利明显。</p><p>2、当时的负债并不是问题，因为负债是可以转化为资产的。核心就是在居民部门杠杆率增长的同时，收入在增长、储蓄在增长，那么杠杆率增加所形成的债务是可以被消化的。</p><h3 id="2023年的今天"><a href="#2023年的今天" class="headerlink" title="2023年的今天"></a>2023年的今天</h3><p>1、目前地方政府的负债、金融部门的负债和企业部门的负债都是可以通过**&#x3D;&#x3D;债券货币化&#x3D;&#x3D;**向中央政府转移，但这仅仅是化解债务中“化”的部分，而“解”的部分仍然需要经济增长来解决。</p><p>❓什么是债券货币化</p><p>2、新增人口正在快速消失，2022年我国的人口增长率已经转为负数，这将会产生非常深远的影响。</p><h2 id="需要注意人口年龄和资产的风险偏好"><a href="#需要注意人口年龄和资产的风险偏好" class="headerlink" title="需要注意人口年龄和资产的风险偏好"></a>需要注意人口年龄和资产的风险偏好</h2><h3 id="60-70黄金一代"><a href="#60-70黄金一代" class="headerlink" title="60-70黄金一代"></a>60-70黄金一代</h3><p>1、60-70称之为黄金一代的原因就是他们完整地经历了中国发展的三波红利：1978年的改革开放、2002年的加入世贸协定以及2008年以后的居民加杠杆和四万亿刺激计划。</p><p>2、他们在中国高速发展的时代积累了大量的财富，但是他们正在老去，正在逐渐进入退休年龄。</p><p>3、我们目前金融市场（包括房子、基金、股票等等）缺少流动性的原因不只是信心，**&#x3D;&#x3D;更是拥有巨额财富的60-70一代（据付鹏的说法掌控了全社会财富的百分之八十左右）他们的风险偏好发生了改变&#x3D;&#x3D;**。他们不愿继续进行高风险高收益的投资。</p><p>4、那么这样就会带来一个问题，用于社会投资的资金将会迅速减少。<u>预测一下</u>：中国未来十年现金存款将翻倍，储蓄增加，从20%到40%。</p><p>5、直到这批人退休养老去世，财富才会发生二次转移，那么储蓄下降，投资活力增加</p><h3 id="那么跟过去的二三十年一样，我们还可以通过政府投资拉动经济增长吗？"><a href="#那么跟过去的二三十年一样，我们还可以通过政府投资拉动经济增长吗？" class="headerlink" title="那么跟过去的二三十年一样，我们还可以通过政府投资拉动经济增长吗？"></a>那么跟过去的二三十年一样，我们还可以通过政府投资拉动经济增长吗？</h3><h2 id="债务式投资构成正反馈的必要条件：充足的“人”"><a href="#债务式投资构成正反馈的必要条件：充足的“人”" class="headerlink" title="债务式投资构成正反馈的必要条件：充足的“人”"></a>债务式投资构成正反馈的必要条件：充足的“人”</h2><h3 id="参考欧美日的投资"><a href="#参考欧美日的投资" class="headerlink" title="参考欧美日的投资"></a>参考欧美日的投资</h3><p>1、欧美日对于基础设施的投资在上世纪八十年代开始陷入停滞。以日本为例，日本对于基础设施的投资在1997年快速衰退。究其根本，是当时的日本青壮年人口数量开始进入下降区间。没有了人，任何的投资都将失效，**&#x3D;&#x3D;无效的投资简称债务。&#x3D;&#x3D;**</p><p>2、人是支撑所有投资的底层资产，没有了人，政府的巨额投资是无法获取足够收益的。</p><p>3、八十年代后，欧美日的主要投资战略就是“走出去”，由此开启了我们所有人的熟知的全球化浪潮。</p><h3 id="巴菲特的投资逻辑"><a href="#巴菲特的投资逻辑" class="headerlink" title="巴菲特的投资逻辑"></a>巴菲特的投资逻辑</h3><p>1、包括中国在内的全球经济快速增长的时代已然结束，那么我们必然要回到一个高自由现金流的时代（巴菲特投资西方石油就是出于这个逻辑）</p><h3 id="我国人口断崖式下跌的内在逻辑"><a href="#我国人口断崖式下跌的内在逻辑" class="headerlink" title="我国人口断崖式下跌的内在逻辑"></a>我国人口断崖式下跌的内在逻辑</h3><p>1、我国人口下跌的逻辑不能过多参考欧美，因为欧美是典型的海洋文明。海洋文明一大特点就是他们的人口增长主要靠移民，而作为大陆文明的中国的人口增长主要靠生育。因此我国人口下跌的逻辑应该放在整个亚洲文化的背景下考虑。</p><p>2、因此我们的问题是：什么阻碍了生育？是居高不下的居民杠杆率。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、<u>预测一下</u>：中国以后还会有前面二三十年的高投资吗？付鹏的答案是不会。**&#x3D;&#x3D;因为任何的高投资跟当前经济核心问题“化解债务”是矛盾的。&#x3D;&#x3D;**具体分析，由于人口进入下跌区间，任何的高投资都会变成巨大的债务而不是收益</p><p>2、我国目前的投资战略参考八十年代的欧美日，也就是我们也需要“走出去”。</p><p>3、<u>预测一下</u>：未来五年到十年，美国利率将始终维持在高位；而中国利率将始终维持在低位。本质原因：欧美日正在走出人口老龄化，他们的财富将重新分配，这就导致他们的年轻劳动力会获得更多的收益。而我们正在走进人口老龄化，我们的社会更需要低利率环境刺激投资和消费。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 宏观经济 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
